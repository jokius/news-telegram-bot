// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInterfaceClient is a mock of InterfaceClient interface.
type MockInterfaceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceClientMockRecorder
}

// MockInterfaceClientMockRecorder is the mock recorder for MockInterfaceClient.
type MockInterfaceClientMockRecorder struct {
	mock *MockInterfaceClient
}

// NewMockInterfaceClient creates a new mock instance.
func NewMockInterfaceClient(ctrl *gomock.Controller) *MockInterfaceClient {
	mock := &MockInterfaceClient{ctrl: ctrl}
	mock.recorder = &MockInterfaceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceClient) EXPECT() *MockInterfaceClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockInterfaceClient) Get(url string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInterfaceClientMockRecorder) Get(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInterfaceClient)(nil).Get), url)
}

// Post mocks base method.
func (m *MockInterfaceClient) Post(url string, body []byte) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", url, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockInterfaceClientMockRecorder) Post(url, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockInterfaceClient)(nil).Post), url, body)
}
