// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInterfaceLogger is a mock of InterfaceLogger interface.
type MockInterfaceLogger struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceLoggerMockRecorder
}

// MockInterfaceLoggerMockRecorder is the mock recorder for MockInterfaceLogger.
type MockInterfaceLoggerMockRecorder struct {
	mock *MockInterfaceLogger
}

// NewMockInterfaceLogger creates a new mock instance.
func NewMockInterfaceLogger(ctrl *gomock.Controller) *MockInterfaceLogger {
	mock := &MockInterfaceLogger{ctrl: ctrl}
	mock.recorder = &MockInterfaceLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceLogger) EXPECT() *MockInterfaceLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockInterfaceLogger) Debug(message interface{}, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockInterfaceLoggerMockRecorder) Debug(message interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockInterfaceLogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockInterfaceLogger) Error(message interface{}, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockInterfaceLoggerMockRecorder) Error(message interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockInterfaceLogger)(nil).Error), varargs...)
}

// Fatal mocks base method.
func (m *MockInterfaceLogger) Fatal(message interface{}, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockInterfaceLoggerMockRecorder) Fatal(message interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockInterfaceLogger)(nil).Fatal), varargs...)
}

// Info mocks base method.
func (m *MockInterfaceLogger) Info(message string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockInterfaceLoggerMockRecorder) Info(message interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockInterfaceLogger)(nil).Info), varargs...)
}

// Warn mocks base method.
func (m *MockInterfaceLogger) Warn(message string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockInterfaceLoggerMockRecorder) Warn(message interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockInterfaceLogger)(nil).Warn), varargs...)
}
