// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/jokius/news-telegram-bot/internal/entity"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// TelegramCallback mocks base method.
func (m *MockUser) TelegramCallback(arg0 entity.TelegramResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TelegramCallback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TelegramCallback indicates an expected call of TelegramCallback.
func (mr *MockUserMockRecorder) TelegramCallback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelegramCallback", reflect.TypeOf((*MockUser)(nil).TelegramCallback), arg0)
}

// MockMessenger is a mock of Messenger interface.
type MockMessenger struct {
	ctrl     *gomock.Controller
	recorder *MockMessengerMockRecorder
}

// MockMessengerMockRecorder is the mock recorder for MockMessenger.
type MockMessengerMockRecorder struct {
	mock *MockMessenger
}

// NewMockMessenger creates a new mock instance.
func NewMockMessenger(ctrl *gomock.Controller) *MockMessenger {
	mock := &MockMessenger{ctrl: ctrl}
	mock.recorder = &MockMessengerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessenger) EXPECT() *MockMessengerMockRecorder {
	return m.recorder
}

// GroupList mocks base method.
func (m *MockMessenger) GroupList(id uint64, groups []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GroupList", id, groups)
}

// GroupList indicates an expected call of GroupList.
func (mr *MockMessengerMockRecorder) GroupList(id, groups interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupList", reflect.TypeOf((*MockMessenger)(nil).GroupList), id, groups)
}

// IncorrectFormat mocks base method.
func (m *MockMessenger) IncorrectFormat(id uint64, command string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncorrectFormat", id, command)
}

// IncorrectFormat indicates an expected call of IncorrectFormat.
func (mr *MockMessengerMockRecorder) IncorrectFormat(id, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncorrectFormat", reflect.TypeOf((*MockMessenger)(nil).IncorrectFormat), id, command)
}

// Message mocks base method.
func (m *MockMessenger) Message(id uint64, text string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Message", id, text)
}

// Message indicates an expected call of Message.
func (mr *MockMessengerMockRecorder) Message(id, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockMessenger)(nil).Message), id, text)
}

// RemovedGroup mocks base method.
func (m *MockMessenger) RemovedGroup(id uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemovedGroup", id)
}

// RemovedGroup indicates an expected call of RemovedGroup.
func (mr *MockMessengerMockRecorder) RemovedGroup(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovedGroup", reflect.TypeOf((*MockMessenger)(nil).RemovedGroup), id)
}

// StartDateUpdated mocks base method.
func (m *MockMessenger) StartDateUpdated(id uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartDateUpdated", id)
}

// StartDateUpdated indicates an expected call of StartDateUpdated.
func (mr *MockMessengerMockRecorder) StartDateUpdated(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDateUpdated", reflect.TypeOf((*MockMessenger)(nil).StartDateUpdated), id)
}

// URLAdded mocks base method.
func (m *MockMessenger) URLAdded(id uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "URLAdded", id)
}

// URLAdded indicates an expected call of URLAdded.
func (mr *MockMessengerMockRecorder) URLAdded(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLAdded", reflect.TypeOf((*MockMessenger)(nil).URLAdded), id)
}

// UnknownError mocks base method.
func (m *MockMessenger) UnknownError(id uint64, text string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnknownError", id, text)
}

// UnknownError indicates an expected call of UnknownError.
func (mr *MockMessengerMockRecorder) UnknownError(id, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnknownError", reflect.TypeOf((*MockMessenger)(nil).UnknownError), id, text)
}

// UnknownSource mocks base method.
func (m *MockMessenger) UnknownSource(id uint64, url string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnknownSource", id, url)
}

// UnknownSource indicates an expected call of UnknownSource.
func (mr *MockMessengerMockRecorder) UnknownSource(id, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnknownSource", reflect.TypeOf((*MockMessenger)(nil).UnknownSource), id, url)
}

// MockSource is a mock of Source interface.
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *MockSourceMockRecorder
}

// MockSourceMockRecorder is the mock recorder for MockSource.
type MockSourceMockRecorder struct {
	mock *MockSource
}

// NewMockSource creates a new mock instance.
func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &MockSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSource) EXPECT() *MockSourceMockRecorder {
	return m.recorder
}

// GetGroupMessages mocks base method.
func (m *MockSource) GetGroupMessages(id string, offset int) (entity.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupMessages", id, offset)
	ret0, _ := ret[0].(entity.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMessages indicates an expected call of GetGroupMessages.
func (mr *MockSourceMockRecorder) GetGroupMessages(id, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMessages", reflect.TypeOf((*MockSource)(nil).GetGroupMessages), id, offset)
}

// Name mocks base method.
func (m *MockSource) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSourceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSource)(nil).Name))
}

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// AddGroupByURL mocks base method.
func (m *MockUserRepo) AddGroupByURL(id uint64, source, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGroupByURL", id, source, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGroupByURL indicates an expected call of AddGroupByURL.
func (mr *MockUserRepoMockRecorder) AddGroupByURL(id, source, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupByURL", reflect.TypeOf((*MockUserRepo)(nil).AddGroupByURL), id, source, url)
}

// Groups mocks base method.
func (m *MockUserRepo) Groups(id uint64) ([]entity.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Groups", id)
	ret0, _ := ret[0].([]entity.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Groups indicates an expected call of Groups.
func (mr *MockUserRepoMockRecorder) Groups(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Groups", reflect.TypeOf((*MockUserRepo)(nil).Groups), id)
}

// RemoveGroup mocks base method.
func (m *MockUserRepo) RemoveGroup(id uint64, source, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveGroup", id, source, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveGroup indicates an expected call of RemoveGroup.
func (mr *MockUserRepoMockRecorder) RemoveGroup(id, source, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGroup", reflect.TypeOf((*MockUserRepo)(nil).RemoveGroup), id, source, url)
}

// UpdateStartDate mocks base method.
func (m *MockUserRepo) UpdateStartDate(id uint64, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStartDate", id, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStartDate indicates an expected call of UpdateStartDate.
func (mr *MockUserRepoMockRecorder) UpdateStartDate(id, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStartDate", reflect.TypeOf((*MockUserRepo)(nil).UpdateStartDate), id, date)
}

// MockGroupRepo is a mock of GroupRepo interface.
type MockGroupRepo struct {
	ctrl     *gomock.Controller
	recorder *MockGroupRepoMockRecorder
}

// MockGroupRepoMockRecorder is the mock recorder for MockGroupRepo.
type MockGroupRepoMockRecorder struct {
	mock *MockGroupRepo
}

// NewMockGroupRepo creates a new mock instance.
func NewMockGroupRepo(ctrl *gomock.Controller) *MockGroupRepo {
	mock := &MockGroupRepo{ctrl: ctrl}
	mock.recorder = &MockGroupRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupRepo) EXPECT() *MockGroupRepoMockRecorder {
	return m.recorder
}

// AllBySource mocks base method.
func (m *MockGroupRepo) AllBySource(source string) ([]entity.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllBySource", source)
	ret0, _ := ret[0].([]entity.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllBySource indicates an expected call of AllBySource.
func (mr *MockGroupRepoMockRecorder) AllBySource(source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllBySource", reflect.TypeOf((*MockGroupRepo)(nil).AllBySource), source)
}

// Update mocks base method.
func (m *MockGroupRepo) Update(group *entity.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", group)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGroupRepoMockRecorder) Update(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGroupRepo)(nil).Update), group)
}

// MockMessageRepo is a mock of MessageRepo interface.
type MockMessageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepoMockRecorder
}

// MockMessageRepoMockRecorder is the mock recorder for MockMessageRepo.
type MockMessageRepoMockRecorder struct {
	mock *MockMessageRepo
}

// NewMockMessageRepo creates a new mock instance.
func NewMockMessageRepo(ctrl *gomock.Controller) *MockMessageRepo {
	mock := &MockMessageRepo{ctrl: ctrl}
	mock.recorder = &MockMessageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepo) EXPECT() *MockMessageRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockMessageRepo) Add(groupID, messageID uint64, source string, messageAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", groupID, messageID, source, messageAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockMessageRepoMockRecorder) Add(groupID, messageID, source, messageAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockMessageRepo)(nil).Add), groupID, messageID, source, messageAt)
}

// Last mocks base method.
func (m *MockMessageRepo) Last(groupID uint64) entity.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last", groupID)
	ret0, _ := ret[0].(entity.Message)
	return ret0
}

// Last indicates an expected call of Last.
func (mr *MockMessageRepoMockRecorder) Last(groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockMessageRepo)(nil).Last), groupID)
}
